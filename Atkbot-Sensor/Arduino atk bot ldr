// Atk_Sensor_Character V2
// Features: 
// Added skill_button, skill cooldown, and skill critrate% & critDMG%
#include<Servo.h>

#define skill_pin 12
#define Atk_button 11
#define run_pin 10
#define heal_pin 8
#define block_pin 9


Servo punggung;
Servo bahukanan;
Servo tangankiri;
Servo pinggang;
Servo kakikanan;
Servo kakikiri;

// Character stats:

int damage =0;
int hp = 30;
int deff = 800;
int atk = 300;
float critRate = 0.2; // Crit rate 20%
float critDMG = 1.0; // Crit DMG 100% (default duration * 1.0)

// Attack button

int button_press_count = 0;
int button_state = 0;
int prev_button_state = 0;
unsigned long lastAtkTime = 0, atkInterval = 500;  // Attack timing

// Skill button

int skill_press_count = 0;
int skill_state = 0;
int prev_skill_state = 0;

static bool isUsingSkill = false; // Status penggunaan skill
static unsigned long lastSkillTime = 0; // Waktu terakhir skill digunakan
static unsigned long skillAnimationStartTime = 0; // Waktu mulai animasi skill
static unsigned long irLedOnTime = 0; // Waktu mulai IR LED menyala
const unsigned long skillCooldown = 5000; // Cooldown 5 detik
const unsigned long skillAnimationDuration = 300; // Durasi animasi skill (300 ms)

// Block button

int block_press_count = 0;
int block_state = 0;
int prev_block_state = 0;
unsigned long lastBlockTime = 0, blockInterval = 3000; // Block timing
bool isBlocking = false;

//Heal button

int heal_press_count=0;
int heal_state =0;
int prev_heal_state =0;

//int BlockldrPin = A3; // Activated while blocking

int ldrPin = A2;
bool ldr_disabled = false;//ldr disable state

int runValue = 0;
int AttackledPin = 2;

long randnum;

bool isAttacking = false;

void setup()
{
  Serial.begin(9600);
  randomSeed(analogRead(A0));
  pinMode(ldrPin,INPUT);
  pinMode(heal_pin, INPUT_PULLUP);
  pinMode(block_pin, INPUT_PULLUP);
  pinMode (Atk_button, INPUT_PULLUP); 
  pinMode (skill_pin, INPUT_PULLUP);
  pinMode (run_pin, INPUT);
  pinMode (AttackledPin, OUTPUT);

  punggung.attach(7);
  bahukanan.attach(6);
  tangankiri.attach(4);
  pinggang.attach(3);

  setIdlePosition();
  Serial.println("Start...");
}


void setIdlePosition()
{
  bahukanan.write(90);
  tangankiri.write(80);
  punggung.write(160);
  tangankiri.write(80);
  pinggang.write(40);
}
void HpState()
{
  Serial.println("Current hp :");
  Serial.println(hp);
  Serial.println(" ");
  // Sensors indicate health point 
  if(ldr_disabled)
  {
    return; // Skip ldr reading when disabled
  }
  // Read ldr value
  int ldrStatus = analogRead(ldrPin);
  Serial.println("ldr Signal : ");
  Serial.println(ldrStatus);
  Serial.println(" ");
  
  if(ldrStatus >=deff){
    Serial.println("Terkena DMG ");
    damage+=1;
    hp-=1;
  }
  else{
    
  }
  if(hp <= 0 ){
    digitalWrite(AttackledPin, LOW);
    Serial.print(" You Dead ");
    Serial.println(" Game Over ");
    while (true);  // stop the program
  }
}
void HealState()
{
  heal_state = digitalRead(heal_pin);
  if (heal_state != prev_heal_state)
  {
    if(heal_state == HIGH) {
      //idle 
    }else{
      //button pressed
      hp++;
      Serial.print("Healed! Current HP: ");
      Serial.println(hp);
    }
    delay(100);
  }
  prev_heal_state = heal_state;
}



void BlockState() //Blocking menggunakan millis
{
  block_state = digitalRead(block_pin);
  if (block_state ==  HIGH && !isBlocking) {
    isBlocking = true;
    ldr_disabled = true;  // Disable LDR
    lastBlockTime = millis();
    Serial.println("Blocking started...");
  }

  if (isBlocking) {
    unsigned long currentTime = millis();
    if (currentTime - lastBlockTime < 1000) {
      // Blocking animation
      bahukanan.write(150);
      tangankiri.write(60);
    } else {
      isBlocking = false;
      ldr_disabled = false;  // Re-enable LDR
      setIdlePosition();
      Serial.println("Blocking ended.");
    }
  }
}

void handleAtkState() {
  static int animationIndex = 0;  // Indeks untuk memilih animasi
  button_state = digitalRead(Atk_button);

  if (button_state == HIGH && !isAttacking) {
    isAttacking = true;
    lastAtkTime = millis();
    digitalWrite(AttackledPin, HIGH); // Lampu menyala saat serangan dimulai

    Serial.println("Attack started...");
  }

  if (isAttacking) {
    unsigned long currentTime = millis();

    switch (animationIndex) {
      case 0:  // Animasi serangan 1
        if (currentTime - lastAtkTime < 200) {
          pinggang.write(100);
          punggung.write(100);
          bahukanan.write(120);
        } else if (currentTime - lastAtkTime < 400) {
          pinggang.write(40);
          punggung.write(160);
        } else {
          isAttacking = false;
          animationIndex = (animationIndex + 1) % 3;  // Pindah ke animasi berikutnya
          digitalWrite(AttackledPin, LOW); // Lampu mati
          setIdlePosition();
          Serial.println("Attack 1 ended.");
        }
        break;

      case 1:  // Animasi serangan 2
        if (currentTime - lastAtkTime < 300) {
          bahukanan.write(150);
          tangankiri.write(60);
          pinggang.write(90);
        } else if (currentTime - lastAtkTime < 500) {
          tangankiri.write(80);
          pinggang.write(40);
        } else {
          isAttacking = false;
          animationIndex = (animationIndex + 1) % 3;  // Pindah ke animasi berikutnya
          digitalWrite(AttackledPin, LOW); // Lampu mati
          setIdlePosition();
          Serial.println("Attack 2 ended.");
        }
        break;

      case 2:  // Animasi serangan 3
        if (currentTime - lastAtkTime < 250) {
          tangankiri.write(140);
          pinggang.write(90);
        } else if (currentTime - lastAtkTime < 450) {
          pinggang.write(20);
          tangankiri.write(60);
        } else {
          isAttacking = false;
          animationIndex = (animationIndex + 1) % 3;  // Pindah ke animasi berikutnya
          digitalWrite(AttackledPin, LOW); // Lampu mati
          setIdlePosition();
          Serial.println("Attack 3 ended.");
        }
        break;
    }
  }
  else if (button_state == HIGH) {
    // Pastikan lampu mati jika tombol tidak ditekan
    digitalWrite(AttackledPin, LOW); // Lampu mati
  }
  prev_button_state = button_state;
}


void handleSkillState()
{
  skill_state = digitalRead(skill_pin);

  if (skill_state == HIGH && !isUsingSkill) {
    isUsingSkill = true; // Skill mulai digunakan
    lastSkillTime = millis();
    skillAnimationStartTime = millis();

    // Hitung apakah skill akan critical
    if (random(100) < (critRate * 100)) {
      irLedOnTime = millis();
      unsigned long critLedDuration = (unsigned long)(critDMG * 500); // Durasi nyala IR LED berdasarkan crit DMG
      digitalWrite(AttackledPin, HIGH); //  LED aktif
      Serial.print("Critical skill activated! IR LED duration: ");
      Serial.println(critLedDuration);
    } else {
      irLedOnTime = 0; // Tidak critical, IR LED tidak menyala
      Serial.println("Normal skill activated!");
    }

    // Mulai animasi skill
    bahukanan.write(120);
    tangankiri.write(60);
    pinggang.write(90);
  }

  if (isUsingSkill) {
    unsigned long currentTime = millis();

    // Kelola animasi skill berdasarkan durasi
    if (currentTime - skillAnimationStartTime < skillAnimationDuration) {
      // Animasi skill sedang berlangsung
    } else {
      // Animasi selesai, kembali ke posisi idle
      setIdlePosition();
      Serial.println("Skill animation ended.");

      // Matikan IR LED setelah animasi selesai
      if (irLedOnTime > 0 && currentTime - irLedOnTime >= (unsigned long)(critDMG * 500)) {
        digitalWrite(AttackledPin, LOW);;
        Serial.println("IR LED turned off.");
      }
    }

    // Cek cooldown
    if (currentTime - lastSkillTime >= skillCooldown) {
      isUsingSkill = false; // Cooldown selesai, skill dapat digunakan lagi
      Serial.println("Skill is ready to use again.");
    }
  }
}
  

 
void loop() {
  HpState();
  HealState();
  BlockState();
  handleAtkState();
  handleSkillState();
}
